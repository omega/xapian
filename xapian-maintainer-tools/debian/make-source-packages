#!/bin/sh
# Make Debian source packages from a Xapian source tree.
#
# Copyright (C) 2004 Richard Boulton
# Copyright (C) 2006,2007,2008,2009 Olly Betts
#
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License as
# published by the Free Software Foundation; either version 2 of the
# License, or (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301
# USA

set -e

if [ x"$1" = x--help ] ; then
  echo "Usage: $0 [xapian-core] [xapian-bindings] [xapian-omega]"
  echo
  echo 'Make Debian source packages.'
  exit 0
fi

trap "echo \"make-source-packages failed\"" EXIT

# Where to get debian directories from.
#BRANCH=trunk
BRANCH=branches/1.2

# Options to pass to dpkg-buildpackage when building source packages
BUILDPACKAGE_SRC_OPTS="--no-lintian -us -uc -d -S"

# Location to download tarballs from
DOWNLOAD_BASE="http://oligarchy.co.uk/xapian/"

# Location to checkout debian packaging from.
SVNROOT="svn+ssh+userv://xapian-svn@svn.xapian.org/xapian/"
# Detect if we're on the machine that Xapian SVN is held on, and don't use
# network to check out sources if so.
if [ "x`hostname`" = "xatreus" ] && [ -r '/home/xapian-svn' ] ; then
  SVNROOT="svn+xapian:///xapian/"
fi

SVNBASE=$SVNROOT/$BRANCH

# Unpack distribution tarballs, and put the debian control files into place,
# and build source packages
make_source_package() {
  pkg=$1
  # Calculate SVN tag to use to check out Debian control files
  debtag=debian-`svn cat "$SVNBASE"/$2/debian/changelog|dpkg-parsechangelog -l-|sed 's/^Version: //p;d'`
  url=${DOWNLOAD_BASE}${VERSION}/$pkg-${VERSION}.tar.gz
  tarball=${pkg}_${VERSION}.orig.tar.gz
  # wget exits with status 1 if -nc was passed the file already exists.
  wget -q -nc -O "$tarball" "$url" || test $? = 1 -a -f "$tarball" || exit $?
  tar zxf "$tarball"
  cd "${pkg}-${VERSION}"
    # Checkout debian control files from SVN.
    svn export -q "${SVNROOT}/tags/${debtag}/$pkg" debian
    # Generate any generated control files.
    debian/rules maint
    debuild ${BUILDPACKAGE_SRC_OPTS}
  cd ..
}

# Get the version number from xapian-core's configure.ac the current tree.
VERSION=`svn cat "$SVNBASE"/xapian-core/configure.ac | grep AC_INIT | head -n 1 | sed 's/^.*AC_INIT( *\[\?xapian-core\]\?, *\[\?\([0-9][0-9]*\)\.\([0-9][0-9]*\)\.\([0-9][0-9]*\)[^0-9].*$/\1.\2.\3/g'`

# Make build directory if it doesn't exist already.
mkdir -p build

# Clean out any files except downloaded original tarballs.
for f in build/* ; do
  case $f in
  *.orig.tar.gz) ;;
  build/\*) ;;
  *) rm -rf "$f" ;;
  esac
done

ls -l build

cd build
  for module in ${*:-xapian-core xapian-bindings xapian-omega} ; do
    case $module in
    xapian-omega) modulepath=xapian-applications/omega ;;
    *) modulepath=$module ;;
    esac

    # Make source package
    make_source_package "$module" "$modulepath"
  done
cd ..

echo "Successfully built Debian source packages."

trap - EXIT
